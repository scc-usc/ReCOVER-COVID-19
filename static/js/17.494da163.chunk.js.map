{"version":3,"sources":["covid19_us.js"],"names":["globallist","Option","Covid19_us","state","area_message","cum_or_inc","data_loading","areas","width","height","arealist","case_data","death_data","death_list","case_preds","case_pred_list","death_preds","death_pred_list","CoD","case_data_plot","death_data_plot","case_preds_plot","death_preds_plot","data_date","pred_date","to_plot","updateWindowDimensions","bind","plotData","onValuesChange","doneLoading","addNewArea","this","window","addEventListener","ReactGA","initialize","pageview","setState","Papa","parse","download","worker","complete","results","i","data","length","slice","map","y","concat","thislist","removeEventListener","innerWidth","innerHeight","thisdata","preds","dd","push","x","dd_p","base_dat","diff_dat","full_dd","id","idx","indexOf","case_d","death_d","changedValues","allValues","optionlist","s","key","value","num_ticks","style","color","className","background","ref","formRef","initialValues","content","placement","Item","marginBottom","label","name","rules","required","message","showSearch","loading","placeholder","Group","initialValue","buttonStyle","Button","margin","top","right","bottom","left","xScale","type","format","xFormat","yScale","min","max","stacked","reverse","axisTop","axisRight","axisLeft","numeral","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisBottom","tickValues","colors","scheme","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabel","pointLabelYOffset","useMesh","legends","text","fontSize","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","itemBackground","axis","ticks","Component"],"mappings":"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","file":"static/js/17.494da163.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Papa from \"papaparse\";\r\nimport 'antd/dist/antd.css';\r\nimport \"./covid19_us.css\";\r\nimport { ResponsiveLine } from \"@nivo/line\";\r\n//import moment from \"moment\";\r\nimport numeral from \"numeral\";\r\nimport ReactGA from \"react-ga\";\r\n\r\nimport {\r\n  List,\r\n  Form,\r\n  Select,\r\n  InputNumber,\r\n  Button,\r\n  Radio,\r\n  Checkbox,\r\n  Slider,\r\n  Tooltip,\r\n  Switch,\r\n  Popover,\r\n  Alert,\r\n  Row,\r\n  Col,\r\n  Input\r\n} from \"antd\";\r\n\r\nvar g_cases = \"https://raw.githubusercontent.com/scc-usc/ReCOVER-COVID-19/master/results/forecasts/us_data.csv\";\r\nvar g_deaths = \"https://raw.githubusercontent.com/scc-usc/ReCOVER-COVID-19/master/results/forecasts/us_deaths.csv\";\r\nvar g_case_preds = \"https://raw.githubusercontent.com/scc-usc/ReCOVER-COVID-19/master/results/forecasts/us_forecasts_current_0.csv\";\r\nvar g_death_preds = \"https://raw.githubusercontent.com/scc-usc/ReCOVER-COVID-19/master/results/forecasts/us_deaths_current_0.csv\";\r\nvar globallist = [];\r\nconst init_areas = \"California\";\r\nconst { Option } = Select;\r\n\r\nclass Covid19_us extends Component {\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n      area_message: \"Please wait for data to load\",\r\n      cum_or_inc: \"Cumulative\",\r\n      data_loading: true,\r\n      areas: init_areas,\r\n      width: 0, \r\n      height: 0,\r\n      arealist: [],\r\n      case_data: [],\r\n      death_data: [],\r\n      death_list:[],\r\n      case_preds: [],\r\n      case_pred_list: [],\r\n      death_preds: [],\r\n      death_pred_list: [],\r\n      CoD: \"case\",\r\n      case_data_plot: [],\r\n      death_data_plot: [],\r\n      case_preds_plot: [],\r\n      death_preds_plot: [],\r\n      data_date:[],\r\n      pred_date: [],\r\n      to_plot: []\r\n    };\r\n\r\n\r\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    this.plotData = this.plotData.bind(this);\r\n    this.onValuesChange = this.onValuesChange.bind(this);\r\n    this.doneLoading = this.doneLoading.bind(this);\r\n    this.addNewArea = this.addNewArea.bind(this);\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateWindowDimensions();\r\n    window.addEventListener('resize', this.updateWindowDimensions);\r\n    ReactGA.initialize('UA-186385643-1');\r\n    ReactGA.pageview('/ReCOVER/RoW');\r\n    this.setState({arealist: globallist});\r\n  }\r\n\r\n  componentWillMount() {\r\n\r\n    Papa.parse(g_cases, {\r\n      download: true, worker: true,\r\n      complete: function(results) {\r\n        var i;\r\n          //var globallist = [];\r\n          for(i=1; i<results.data.length; i++)\r\n          {\r\n            if(results.data[i].length > 2){\r\n              globallist[i-1] = results.data[i][1];\r\n            }\r\n          }\r\n          this.setState({data_date: results.data[0].slice(2).map(y=>y.concat('T23:00:00Z'))});\r\n          this.setState({arealist: globallist});\r\n          this.setState({case_data: results.data}, ()=>{this.doneLoading()});\r\n          //console.log(this.state.data_date);\r\n        }.bind(this)\r\n      });\r\n\r\n    Papa.parse(g_deaths, {\r\n      download: true, worker: true,\r\n      complete: function(results) {\r\n        var i;\r\n        var thislist = [];\r\n        for(i=1; i<results.data.length; i++)\r\n        {\r\n          if(results.data[i].length > 2){\r\n            thislist[i-1] = results.data[i][1];\r\n          }\r\n        }\r\n        this.setState({death_list: thislist});\r\n        this.setState({death_data: results.data}, ()=>{this.doneLoading()});\r\n      }.bind(this)\r\n    });\r\n\r\n    Papa.parse(g_case_preds, {\r\n      download: true, worker: true,\r\n      complete: function(results) {\r\n        var i;\r\n        var thislist = [];\r\n        for(i=1; i<results.data.length; i++)\r\n        {\r\n          if(results.data[i].length > 2){\r\n            thislist[i-1] = results.data[i][1];\r\n          }\r\n        }\r\n        this.setState({pred_date: results.data[0].slice(2).map(y=>y.concat('T23:00:00Z'))});\r\n        this.setState({case_pred_list: thislist});\r\n        this.setState({case_preds: results.data}, ()=>{this.doneLoading()});\r\n        //console.log(this.state.pred_date);\r\n      }.bind(this)\r\n    });\r\n\r\n    Papa.parse(g_death_preds, {\r\n      download: true, worker: true,\r\n      complete: function(results) {\r\n        var i;\r\n        var thislist = [];\r\n        for(i=1; i<results.data.length; i++)\r\n        {\r\n          if(results.data[i].length > 2){\r\n            thislist[i-1] = results.data[i][1];\r\n          }\r\n        }\r\n        this.setState({death_pred_list: thislist});\r\n        this.setState({death_preds: results.data}, ()=>{this.doneLoading()});\r\n        //console.log(this.state.death_preds.length);\r\n      }.bind(this)\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateWindowDimensions);\r\n  }\r\n\r\n  updateWindowDimensions() {\r\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n  }\r\n\r\n  plotData()\r\n  {\r\n    var dd=[];\r\n    var thisdata, preds;\r\n    var i;\r\n\r\n    if(this.state.CoD === \"case\")\r\n    {\r\n      thisdata = this.state.case_data_plot;\r\n      preds = this.state.case_preds_plot;\r\n    }\r\n    else\r\n    {\r\n      thisdata = this.state.death_data_plot;\r\n      preds = this.state.death_preds_plot; \r\n    }\r\n\r\n    if(this.state.cum_or_inc === \"Cumulative\")\r\n    {  \r\n      for(i=0; i<thisdata.length; i++)\r\n      {\r\n        if(thisdata[i] > 0 && this.state.data_date[i]){\r\n          dd.push({\r\n            x: this.state.data_date[i],\r\n            y: thisdata[i]\r\n          });\r\n        }\r\n      }\r\n      var dd_p = [];\r\n      for(i=0; i<preds.length; i++)\r\n      {\r\n        if (this.state.pred_date[i])\r\n        {\r\n        dd_p.push({\r\n          x: this.state.pred_date[i],\r\n          y: preds[i]\r\n        });\r\n      }\r\n      }\r\n    }\r\n    else\r\n    {\r\n      var base_dat = thisdata[0];\r\n      var diff_dat = 0;\r\n      for(i=1; i<thisdata.length; i++)\r\n      {\r\n        diff_dat = thisdata[i] -base_dat;\r\n        if(diff_dat >= 0 && base_dat> 0 && this.state.data_date[i])\r\n        {\r\n          dd.push({\r\n            x: this.state.data_date[i],\r\n            y: diff_dat\r\n          });\r\n        }\r\n        base_dat = thisdata[i];\r\n      }\r\n      var dd_p = [];\r\n      base_dat = thisdata[thisdata.length-1];\r\n      //base_dat = base_dat>0?base_dat:-1;\r\n      for(i=0; i<preds.length; i++)\r\n      {\r\n        diff_dat = preds[i] -base_dat;\r\n        if(diff_dat >= 0 && base_dat> 0 && this.state.pred_date[i])\r\n        {\r\n          dd_p.push({\r\n            x: this.state.pred_date[i],\r\n            y: diff_dat\r\n          });\r\n        }\r\n        base_dat = preds[i];\r\n      }\r\n    }\r\n    var full_dd = [{id: \"Data\", data:dd}, {id: \"Forecasts\", data:dd_p},];\r\n    this.setState({to_plot: full_dd});\r\n    //console.log(full_dd);\r\n  }\r\n\r\n  addNewArea(areas)\r\n  {\r\n      var idx = this.state.arealist.indexOf(areas);\r\n      var case_d = [];\r\n      //console.log(idx);\r\n      if (idx>-1){\r\n        case_d = this.state.case_data[idx+1].slice(2);\r\n      }\r\n      this.setState({case_data_plot : case_d});\r\n\r\n      case_d = [];\r\n      idx = this.state.case_pred_list.indexOf(areas);\r\n      if (idx>-1){\r\n        case_d = this.state.case_preds[idx+1].slice(2);\r\n      }\r\n      this.setState({case_preds_plot : case_d});\r\n      \r\n      var death_d = [];\r\n      idx = this.state.death_list.indexOf(areas);\r\n      if (idx>-1){\r\n        death_d = this.state.death_data[idx+1].slice(2);\r\n      }\r\n      this.setState({death_data_plot : death_d});\r\n      \r\n      death_d =[];\r\n      idx = this.state.death_pred_list.indexOf(areas);\r\n      if (idx>-1){\r\n        death_d = this.state.death_preds[idx+1].slice(2);\r\n      }\r\n      this.setState({death_preds_plot: death_d}, ()=>{this.plotData()});\r\n  }\r\n\r\n  onValuesChange(changedValues, allValues){\r\n\r\n    if (\"areas\" in changedValues)\r\n    {\r\n      this.addNewArea(allValues.areas);\r\n    }\r\n    if(\"cum_or_inc\" in changedValues)\r\n    {\r\n      this.setState({cum_or_inc: allValues.cum_or_inc}, ()=>this.plotData());  \r\n    }\r\n    this.setState({CoD: allValues.CoD}, ()=>this.plotData());\r\n  }\r\n\r\n  doneLoading()\r\n  {\r\n      if(this.state.data_loading & this.state.case_preds.length>0 && this.state.death_preds.length>0 && this.state.death_data.length > 0 && this.state.case_data.length > 0)\r\n      {\r\n        this.setState({data_loading: false});\r\n        this.setState({area_message: \"Start typing a location name to see its data and forecasts\"});\r\n        this.setState({areas: init_areas}, ()=>{this.addNewArea(this.state.areas)});\r\n      }\r\n  }\r\n\r\n  render() {\r\n    const {areas,arealist,CoD, to_plot, data_loading, cum_or_inc, area_message} = this.state;\r\n    //console.log(to_plot);\r\n    const theme = {\r\n      axis: {\r\n        ticks: {\r\n          text: {\r\n            fontSize: 16\r\n          }\r\n        },\r\n        legend: {\r\n          text: {\r\n            fontSize: 16\r\n          }\r\n        }\r\n      },\r\n      legends: {\r\n        text: {\r\n          fontSize: 16\r\n        }\r\n      }\r\n    };\r\n    let optionlist = arealist.length > 0\r\n    && arealist.map ((s) => {\r\n      return (\r\n        <Option key={s} value={s}>{s}</Option>\r\n        )\r\n      }, this);\r\n      const num_ticks = 1 + this.state.width/280;\r\n\r\n      \r\n\r\n      return (\r\n       <div style={{color: \"#1f1c1c\"}}>\r\n       <div className=\"grid\">\r\n         <div className = \"introduction\">\r\n         <Row>\r\n         <h1>COVID-19 Forecasts for US states</h1>\r\n         </Row>\r\n         <div style ={{background: \"#fae3a2\"}}>\r\n         <Row>\r\n         <p>\r\n         Note: These forecasts are generated through automated scripts and not analyzed or fixed manually. \r\n         </p>\r\n         </Row>\r\n         <Row>\r\n         <p>\r\n         Note: Unreliable forecasts expected due to uncertain case reporting. \r\n         </p>\r\n         \r\n         </Row>\r\n         </div> \r\n         </div>\r\n\r\n         <Row>\r\n         <div className=\"form-column-row\">\r\n         \r\n         <Form \r\n         ref={this.formRef}\r\n         onValuesChange={this.onValuesChange}\r\n         initialValues={{\r\n          areas: areas,\r\n          CoD: CoD,\r\n          cum_or_inc: cum_or_inc,\r\n        }}>\r\n\r\n       \r\n        <Popover\r\n        content={area_message}\r\n        placement=\"top\"\r\n        >\r\n        <Form.Item\r\n        style={{ marginBottom: \"0px\" }}\r\n        label=\"Location\"\r\n        name=\"areas\"\r\n        rules={[\r\n          { required: true, message: \"Please select areas!\" },\r\n          ]}\r\n          >\r\n          <Select\r\n          showSearch\r\n          loading = {this.state.data_loading}\r\n          style={{ width: \"100%\" }}\r\n          placeholder=\"Select Areas\"\r\n          >\r\n          {optionlist}\r\n          </Select>\r\n          </Form.Item>\r\n          </Popover>\r\n          \r\n          \r\n            <Row>\r\n\r\n            <Col>\r\n            <Popover\r\n            content={\"Choose to plot cumulative or new weekly numbers\"}\r\n            placement=\"bottomLeft\">\r\n\r\n            <Form.Item label=\"Data Type\" style={{marginBottom: \"5px\"}} name=\"cum_or_inc\" value={cum_or_inc}>\r\n            <Radio.Group\r\n            initialValue = \"Cumulative\"\r\n            buttonStyle=\"solid\"\r\n            >\r\n            <Radio.Button value=\"Cumulative\">Cumulative</Radio.Button>\r\n            <Radio.Button value=\"New\">Weekly New</Radio.Button>\r\n            </Radio.Group>\r\n            </Form.Item>\r\n            </Popover>\r\n            </Col>\r\n\r\n            <Col>\r\n            <Popover\r\n            content={\"Choose cases or deaths to plot\"}\r\n            placement=\"bottomLeft\">\r\n\r\n            <Form.Item label=\"\" style={{marginBottom: \"5px\"}} name=\"CoD\" value={CoD}>\r\n            <Radio.Group\r\n            initialValue = \"case\"\r\n            buttonStyle=\"solid\"\r\n            >\r\n            <Radio.Button value=\"case\">Cases</Radio.Button>\r\n            <Radio.Button value=\"death\">Deaths</Radio.Button>\r\n            </Radio.Group>\r\n            </Form.Item>\r\n            </Popover>\r\n            </Col>\r\n\r\n            </Row>\r\n          </Form>\r\n          </div>\r\n          </Row>\r\n          <Row>\r\n          <div className=\"graph-row\">\r\n            <ResponsiveLine\r\n            data = {to_plot}\r\n            margin={{ top: 50, right: 10, bottom: 100, left: 60 }}\r\n            xScale={{\r\n              type: \"time\",\r\n              format: \"%Y-%m-%dT%H:%M:%SZ\",\r\n            }}\r\n            xFormat=\"time:%Y-%m-%d\"\r\n            yScale={{\r\n              type: \"linear\",\r\n              min: \"auto\",\r\n              max: \"auto\",\r\n              stacked: false,\r\n              reverse: false\r\n            }}\r\n            axisTop={null}\r\n            axisRight={null}\r\n            axisLeft={{\r\n              format: y => numeral(y).format(\"0.[0]a\"),\r\n              orient: \"left\",\r\n              tickSize: 5,\r\n              tickPadding: 5,\r\n              tickRotation: 0,\r\n              legend: cum_or_inc.concat(' '.concat(CoD.concat('s'))),\r\n              legendOffset: -55,\r\n              legendPosition: \"middle\",\r\n            }}\r\n            axisBottom={{\r\n              format: \"%b %d\",\r\n              tickValues: num_ticks,\r\n              legend: \"date\",\r\n              legendOffset: 36,\r\n              legendPosition: \"middle\"\r\n            }}\r\n            colors={{ scheme: \"nivo\" }}\r\n            pointSize={10}\r\n            pointColor={{ theme: \"background\" }}\r\n            pointBorderWidth={2}\r\n            pointBorderColor={{ from: \"serieColor\" }}\r\n            pointLabel=\"y\"\r\n            pointLabelYOffset={-12}\r\n            useMesh={true}\r\n            legends={[\r\n              {\r\n                text: {fontSize: 14},\r\n                anchor: \"top-left\",\r\n                direction: \"column\",\r\n                justify: false,\r\n                translateX: 30,\r\n                translateY: 0,\r\n                itemsSpacing: 0,\r\n                itemDirection: \"left-to-right\",\r\n                itemWidth: 80,\r\n                itemHeight: 20,\r\n                itemOpacity: 0.75,\r\n                symbolSize: 12,\r\n                symbolShape: \"circle\",\r\n                symbolBorderColor: \"rgba(0, 0, 0, .5)\",\r\n                effects: [\r\n                {\r\n                  on: \"hover\",\r\n                  style: {\r\n                    itemBackground: \"rgba(0, 0, 0, .03)\",\r\n                    itemOpacity: 1\r\n                  }\r\n                }\r\n                ]\r\n              }\r\n              ]}\r\n              theme = {theme}\r\n              />\r\n            </div>\r\n          </Row>\r\n\r\n\r\n          </div>\r\n          </div>\r\n          );\r\n        }\r\n      }\r\n\r\n      export default Covid19_us;"],"sourceRoot":""}